{"ast":null,"code":"import leaflet from 'leaflet';\nimport '@geoman-io/leaflet-geoman-free';\nimport '@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css';\n//  import * as turf from '@turf/turf'\nimport axios from 'axios';\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      map: null,\n      polygon: null,\n      marker: null,\n      polygon2: null,\n      options: {\n        position: 'topleft',\n        // toolbar position, options are 'topleft', 'topright', 'bottomleft', 'bottomright'\n        drawMarker: true,\n        // adds button to draw markers\n        drawPolyline: true,\n        // adds button to draw a polyline\n        drawRectangle: true,\n        // adds button to draw a rectangle\n        drawPolygon: true,\n        // adds button to draw a polygon\n        drawCircle: true,\n        // adds button to draw a cricle\n        cutPolygon: true,\n        // adds button to cut a hole in a polygon\n        editMode: true,\n        // adds button to toggle edit mode for all layers\n        removalMode: true // adds a button to remove layers\n      },\n\n      geojsonFeature: {\n        // \"type\": \"FeatureCollection\",\n        // \"features\": [\n        //   {\n        //     \"type\": \"Feature\",\n        //     \"properties\": {},\n        //     \"geometry\": {\n        //       \"coordinates\": \n        //         [51.509, -0.08],\n        //       \"type\": \"Point\"\n        //     }\n        //   },\n        // ]\n      },\n      geoFeature: 0\n    };\n  },\n  methods: {\n    newGeo() {\n      var fg = leaflet.featureGroup();\n      this.map.eachLayer(layer => {\n        if (layer instanceof leaflet.Path || layer instanceof leaflet.Marker) {\n          fg.addLayer(layer);\n        }\n      });\n      console.log(fg.toGeoJSON());\n      return fg.toGeoJSON();\n    }\n  },\n  mounted() {\n    this.map = leaflet.map('map').setView([49.25578, 28.46221], 15);\n    leaflet.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19,\n      attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n    }).addTo(this.map);\n    this.polygon = leaflet.polygon([[49.25578, 28.46221], [49.25724, 28.46273], [49.25742, 28.46215], [49.25884, 28.46237], [49.25893, 28.46130], [49.26026, 28.46135], [49.26047, 28.45471], [49.25916, 28.45445], [49.25903, 28.45517], [49.25837, 28.45510], [49.25821, 28.45663], [49.25791, 28.45665], [49.25769, 28.46030], [49.25685, 28.46009], [49.25646, 28.45980]]).addTo(this.map).bindPopup(\"P'yatnychanske cemetery\")\n    // .openPopup()\n    .setStyle({\n      color: 'black',\n      fillColor: 'black'\n    });\n\n    // this.marker = leaflet.marker().addTo(this.map);\n\n    this.map.pm.addControls(this.options);\n\n    // this.polygon2 = leaflet.geoJSON(this.geojsonFeature).addTo(this.map)\n    // .setStyle({ color: '#000',fillColor: '#BADA55',fillOpacity: 0.5})\n  },\n\n  created() {\n    axios.get('Cemetery_Vinnytska.geojson').then(responce => {\n      this.geojsonFeature = responce.data;\n      let icon = leaflet.icon({\n        iconUrl: 'icon.png',\n        iconSize: [25, 25],\n        // size of the icon\n        shadowSize: [50, 64],\n        // size of the shadow\n        shadowAnchor: [4, 62] // the same for the shadow\n        // popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor\n      });\n\n      leaflet.geoJSON(this.geojsonFeature, {\n        pointToLayer: function (feature, latlng) {\n          return leaflet.marker(latlng, {\n            icon: icon\n          });\n        }\n      }).addTo(this.map).bindPopup(function (layer) {\n        if (layer.feature.properties.codename !== null && layer.feature.properties.City !== null) return layer.feature.properties.ADMIN_1 + ' область, ' + layer.feature.properties.ADMIN_2 + ' район, ' + layer.feature.properties.ADMIN_3 + ' громада, ' + layer.feature.properties.codename + ' ' + layer.feature.properties.City;else return layer.feature.properties.ADMIN_1 + ' область, ' + layer.feature.properties.ADMIN_2 + ' район, ' + layer.feature.properties.ADMIN_3 + ' громада';\n      });\n    });\n    // .then(responce => {\n    //     this.geojsonFeature = responce.data\n\n    //     // console.log(this.geojsonFeature);\n    //     this.polygon2 = leaflet.geoJSON(this.geojsonFeature,\n    //     // {style: function (feature) {\n    //     // return {color: feature.properties.color};\n    //     // }}\n    //     ).addTo(this.map)\n    //     .bindPopup(function (layer) {if(layer.feature.properties.codename !== null &&  layer.feature.properties.City !== null) return layer.feature.properties.ADMIN_1+ ' область, '\n    //     + layer.feature.properties.ADMIN_2 + ' район, ' + layer.feature.properties.ADMIN_3 + ' громада, '\n    //     + layer.feature.properties.codename + ' ' + layer.feature.properties.City;\n    //     else return layer.feature.properties.ADMIN_1+ ' область, '\n    //     + layer.feature.properties.ADMIN_2 + ' район, ' + layer.feature.properties.ADMIN_3 + ' громада'\n    //     })\n    // })\n    // .catch(el => {\n    //     this.errors.push(el)\n    // })\n  }\n};","map":{"version":3,"mappings":"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","names":["leaflet","axios","name","components","data","map","polygon","marker","polygon2","options","position","drawMarker","drawPolyline","drawRectangle","drawPolygon","drawCircle","cutPolygon","editMode","removalMode","geojsonFeature","geoFeature","methods","newGeo","fg","featureGroup","eachLayer","layer","Path","Marker","addLayer","console","log","toGeoJSON","mounted","setView","tileLayer","maxZoom","attribution","addTo","bindPopup","setStyle","color","fillColor","pm","addControls","created","get","then","responce","icon","iconUrl","iconSize","shadowSize","shadowAnchor","geoJSON","pointToLayer","feature","latlng","properties","codename","City","ADMIN_1","ADMIN_2","ADMIN_3"],"sourceRoot":"","sources":["/home/dima/r-i-p/src/App.vue"],"sourcesContent":["<template>\n   <div id=\"map\"></div>\n</template>\n\n<script>\nimport leaflet from 'leaflet'\nimport '@geoman-io/leaflet-geoman-free';  \nimport '@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css'; \n//  import * as turf from '@turf/turf'\nimport axios from 'axios'\n\n\nexport default {\n  name: 'App',\n  components: {\n    \n  },\n  data() {\n    return {\n      map: null,\n      polygon: null,\n      marker: null,\n      polygon2: null,\n      options: {\n          position: 'topleft', // toolbar position, options are 'topleft', 'topright', 'bottomleft', 'bottomright'\n          drawMarker: true, // adds button to draw markers\n          drawPolyline: true, // adds button to draw a polyline\n          drawRectangle: true, // adds button to draw a rectangle\n          drawPolygon: true, // adds button to draw a polygon\n          drawCircle: true, // adds button to draw a cricle\n          cutPolygon: true, // adds button to cut a hole in a polygon\n          editMode: true, // adds button to toggle edit mode for all layers\n          removalMode: true, // adds a button to remove layers\n        },\n        geojsonFeature: {\n          // \"type\": \"FeatureCollection\",\n          // \"features\": [\n          //   {\n          //     \"type\": \"Feature\",\n          //     \"properties\": {},\n          //     \"geometry\": {\n          //       \"coordinates\": \n          //         [51.509, -0.08],\n          //       \"type\": \"Point\"\n          //     }\n          //   },\n          // ]\n        },\n        geoFeature: 0,\n    }\n  },\n  methods: {\n      newGeo(){\n        var fg = leaflet.featureGroup();\n            this.map.eachLayer((layer)=>{\n              if(layer instanceof leaflet.Path || layer instanceof leaflet.Marker){\n                fg.addLayer(layer);\n              }\n              });\n               console.log(fg.toGeoJSON());\n              return fg.toGeoJSON()\n      }\n  },\n  mounted() {\n    this.map = leaflet.map('map').setView([49.25578,28.46221], 15); \n    leaflet.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    maxZoom: 19,\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(this.map);\n    this.polygon = leaflet.polygon([\n    [49.25578,28.46221],\n    [49.25724,28.46273],\n    [49.25742,28.46215],\n    [49.25884,28.46237],\n    [49.25893,28.46130],\n    [49.26026,28.46135],\n    [49.26047,28.45471],\n    [49.25916,28.45445],\n    [49.25903,28.45517],\n    [49.25837,28.45510],\n    [49.25821,28.45663],\n    [49.25791,28.45665],\n    [49.25769,28.46030],\n    [49.25685,28.46009],\n    [49.25646,28.45980]\n]).addTo(this.map)\n  .bindPopup(\"P'yatnychanske cemetery\")\n  // .openPopup()\n  .setStyle({color:'black',fillColor: 'black',});\n\n  // this.marker = leaflet.marker().addTo(this.map);\n\n  this.map.pm.addControls(this.options);\n\n  // this.polygon2 = leaflet.geoJSON(this.geojsonFeature).addTo(this.map)\n  // .setStyle({ color: '#000',fillColor: '#BADA55',fillOpacity: 0.5})\n  },\n  created() {\n        axios.get('Cemetery_Vinnytska.geojson')\n        .then(responce =>{\n      this.geojsonFeature = responce.data\n      let icon = leaflet.icon({\n    iconUrl: 'icon.png',\n    iconSize:     [25, 25], // size of the icon\n    shadowSize:   [50, 64], // size of the shadow\n    shadowAnchor: [4, 62],  // the same for the shadow\n    // popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor\n});\n      leaflet.geoJSON(this.geojsonFeature,{\n    pointToLayer: function(feature,latlng){\n      return leaflet.marker(latlng,{icon: icon});\n    }\n  }).addTo(this.map)\n    .bindPopup(function (layer) {if(layer.feature.properties.codename !== null &&  layer.feature.properties.City !== null) return layer.feature.properties.ADMIN_1+ ' область, '\n            + layer.feature.properties.ADMIN_2 + ' район, ' + layer.feature.properties.ADMIN_3 + ' громада, '\n            + layer.feature.properties.codename + ' ' + layer.feature.properties.City;\n            else return layer.feature.properties.ADMIN_1+ ' область, '\n            + layer.feature.properties.ADMIN_2 + ' район, ' + layer.feature.properties.ADMIN_3 + ' громада'\n            })\n          })\n        // .then(responce => {\n        //     this.geojsonFeature = responce.data\n            \n        //     // console.log(this.geojsonFeature);\n        //     this.polygon2 = leaflet.geoJSON(this.geojsonFeature,\n        //     // {style: function (feature) {\n        //     // return {color: feature.properties.color};\n        //     // }}\n        //     ).addTo(this.map)\n        //     .bindPopup(function (layer) {if(layer.feature.properties.codename !== null &&  layer.feature.properties.City !== null) return layer.feature.properties.ADMIN_1+ ' область, '\n        //     + layer.feature.properties.ADMIN_2 + ' район, ' + layer.feature.properties.ADMIN_3 + ' громада, '\n        //     + layer.feature.properties.codename + ' ' + layer.feature.properties.City;\n        //     else return layer.feature.properties.ADMIN_1+ ' область, '\n        //     + layer.feature.properties.ADMIN_2 + ' район, ' + layer.feature.properties.ADMIN_3 + ' громада'\n        //     })\n        // })\n        // .catch(el => {\n        //     this.errors.push(el)\n        // })\n    },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n#map { height: 480px;}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}